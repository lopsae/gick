#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    gevert -- reverts a file selected with `gick`

SYNOPSIS
    gevert [-hD] [--] <substrings>...

DESCRIPTION
    Checks out the HEAD version of a file selected with `gick` and the given
    `<substrings>`. The file in both stage and the workspace will be set to
    their content in HEAD.

    For any file reverted a backup of the workspace file is created in
    /tmp/gevert/. The file location is printed as part of the program's
    output.

    The program can also received through standard input a list of files
    to revert, one filepath per line. When using standard input all given
    `<substrings>` are ignored and no search is performed.

OPTIONS
    -h  Prints this help output and quits the program.

    -a  Reverts all files that match the search, instead of only the first
        one.

    -D  Enables dry run mode and performs no changes to the workspace.
        Messages about files being reverted are still printed, and backup
        copies are still created.
helpDoc


# Error codes
error_invalidOptions=1
error_noArguments=2
error_noMatch=3


# Options defaults
gickOptions=''
run='true'


# Options parsing
while getopts :haD option; do
	case $option in
 		'h') # Print help
			echo "$helpDoc" | less
			exit 0
			;;
		'D') # Dry run mode
			run='false'
			;;
		['a']) # Pass through to gick
			# all matches
			gickOptions+=" -$option"
			;;
		'?') # Invalid option
			echo "Invalid option: -$OPTARG" >&2
			exit $error_invalidOptions
			;;
	esac
done
shift $(( OPTIND - 1 ));


# Either piped content or arguments are required
usePiped='false'
if [[ ! -t 0 ]]; then
	usePiped='true'
	piped=$(cat)
elif [[ $# = 0 ]]; then
	echo 'No arguments given' >&2
	exit $error_noArguments
fi

# Getting the list of files to use
if [[ $usePiped = true ]]; then
	fileList="$piped"
else
	fileList=$(gick $gickOptions -- "$@" 2>/dev/null)

	if [[ $? != 0 ]]; then
		echo 'No files found' >&2
		exit $error_noMatch
	fi
fi


# Generating a the data for backups
backupPath="/tmp/gevert/"
mkdir -p "$backupPath"

# Creating a time stamp for the file
# year, month, day, hour, minute, second
timeStamp=$(date +"%Y%m%d_%H%M%S")

# Reverting the files
IFS=$'\n'
for fileName in $fileList; do
	baseFileName=$(basename $fileName)
	backupFile="${backupPath}${timeStamp}_${baseFileName}_XXXX"
	backupFile=$(mktemp $backupFile)

	# Make a backup of the file if it exists
	if [[ -f $fileName ]]; then
		cp $fileName $backupFile
		echo "backup in '$backupFile'"
	fi

	fileStatus=$(glist -- "$fileName")
	stageStatus=${fileStatus:0:1}
	workspaceStatus=${fileStatus:1:1}

	case $stageStatus in
		[A])
			# Added files cannot be checkout since they are new
			[[ $run = 'true' ]] && geset -p -- "$fileName" >/dev/null
			[[ $run = 'true' ]] && rm "$fileName"
			echo "deleted '$fileName'"
			;;
		[?])
			[[ $run = 'true' ]] && rm "$fileName"
			echo "deleted '$fileName'"
			;;
		*)
			[[ $run = 'true' ]] && git checkout HEAD -- "$fileName"
			echo "checked out '$fileName'"
			;;
	esac
done
unset IFS

