#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    geset -- reset a file selected with `gick`

SYNOPSIS
    geset [-hpaD] [--] <substrings>...

DESCRIPTION
    Unstages a file selected with `gick` and the given `<substrings>`. The
    file's staged entry is set to the same content as in the workspace.
    Workspace content is never modified.

    Only files with a stage status are considered for selection.

    If `<substrings>` is comprised of a single dot `.` the program will try
    to unstage all modified files with a stage status.

    The program can also received through standard input a list of files
    to unstage, one filepath per line. When using standard input all given
    `<substrings>` are ignored and no search is performed.

OPTIONS
    -h  Prints this help output and quits the program.

    -p  Uses the arguments given as filepaths, instead of performing a
        search.

    -a  Stages all files that match the search, instead of only the first
        one. This option is ignored if `-p` is used.

    -D  Enables dry run mode and performs no changes to the stage. Messages
        about files being unstaged are still printed.
helpDoc


# Error codes
error_invalidOptions=1
error_noArguments=2
error_noMatch=3


# Options defaults
dotCaseOptions=''
gickOptions=''
usePlainPaths='false'
run='true'


# Options parsing
while getopts :hpaD option; do
	case $option in
 		h)
			# Print help
			if [[ -t 0 ]]; then
				echo "$helpDoc" | less
			else
				echo "$helpDoc"
			fi
			exit 0
			;;
		p)
			# Using plain paths
			usePlainPaths='true'
			;;
		[a])
			# Pass through to gick
			# all matches
			gickOptions+=" -$option"
			;;
		D)
			# Dry run mode
			run='false'
			dotCaseOptions+=" -$option"
			;;
		?)
			echo "Invalid option: -$OPTARG" >&2
			exit $error_invalidOptions
			;;
	esac
done
shift $(( OPTIND - 1 ));


# Piped content
usePiped='false'
if [[ ! -t 0 ]]; then
	usePiped='true'
	piped=$(cat)
elif [[ $# = 0 ]]; then
	echo 'No arguments given' >&2
	exit $error_noArguments
fi

# Dot special case
if [[ $# = 1 && $1 = '.' ]]; then
	glist -cs | geset $dotCaseOptions
	exit $?
fi

# Getting the list of files to use
if [[ $usePiped = 'true' ]]; then
	# Use piped list
	fileList="$piped"
else
	if [[ $usePlainPaths = 'true' ]]; then
		# Moving arguments to filelist, separated by newlines
		fileList=$1
		shift
		for item in "$@"; do
			fileList+=$'\n'$item
		done
	else
		# Find the file with gick
		fileList=$(gick -s $gickOptions -- "$@" 2>/dev/null)

		if [[ $? != 0 ]]; then
			echo 'No files found' >&2
			exit $error_noMatch
		fi
	fi
fi


# Reseting the files
IFS=$'\n'
for fileName in $fileList; do
	fileStatus=$(glist -s -- "$fileName")

	if [[ $? != 0 ]]; then
		echo "cannot reset '$fileName'" >&2
		continue
	fi

	# stageStatus=${fileStatus:0:1}
	# workspaceStatus=${fileStatus:1:1}

	[[ $run = 'true' ]] && git reset --quiet HEAD -- "$fileName"
	echo "reset '$fileName'"
done
unset IFS

