#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    gick -- search filepaths that have a git status

SYNOPSIS
    pick [-hxswa] <substrings>...

DESCRIPTION
    Prints the first matching filepath, from any files with a git status,
    using the `pick` program and the given `<substrings>`. By default only
    the filepath is printed.

OPTIONS
    -h  Prints this help output and quits the program.

    -x  Prints the status of the file along the filepath. The format
        remains the same used by `git status`.

    -s  Considers only files with any status in stage.

    -w  Considers only files with any status in the workspace.

    -a  Prints all files that match the search.
helpDoc


# Error codes
error_invalidOptions=1
error_noParams=2
error_noMatch=3


# Options values
showStatus='false'
glistOptions=''
pickOptions=''


# Options parsing
while getopts :hxwsa option; do
	case $option in
 		h)
			# Print help
			if [[ -t 0 ]]; then
				echo "$helpDoc" | less
			else
				echo "$helpDoc"
			fi
			exit 0
			;;
		x)
			# Print status
			showStatus='true'
			;;
		[sw])
			# Pass through to glist
			# Limit to stage or workspace
			glistOptions+=" -$option"
			;;
		[a])
			# Pass through to pick
			pickOptions+=" -$option"
			;;
		?)
			echo "Invalid option: -$OPTARG" >&2
			exit $error_invalidOptions
			;;
	esac
done

shift $(( OPTIND - 1 ));


# Options validation
if [[ $# = 0 ]]; then
	echo 'No parameters given' >&2
	exit $error_noParams
fi


# List of files to consider
fileList=$(glist -c $glistOptions)

# Picking
matches=$(echo "$fileList" | pick $pickOptions -- "$@" 2>/dev/null)
if [[ $? != 0 ]]; then
	echo 'No match found' >&2
	exit $error_noMatch
fi

if [[ $showStatus = 'true' ]]; then
	echo "$matches" | glist
else
	echo "$matches"
fi

