#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    ginfo - print information about the git repository

SYNOPSIS
    ginfo [-h|help]
    ginfo branch|size|upstream|url|user

DESCRIPTION
    ginfo [help]
        Prints this help output and quits the program.

    ginfo branch
        Prints the current branch checked out.

    ginfo size
        Prints a human readable output of the repository object count and
        size.

    ginfo upstream|tracking
        Prints the current upstream branch.

    ginfo url|urls [<substrings>...]
        Prints the push and fetch urls of a remote selected with `gickr`
        and the given `<substrings>`. If no `<substrings>` are given, the
        info of all remotes is printed.

    ginfo user
        Prints user and email configured for the repository.
helpDoc


# Error codes
error_invalidArguments=1
error_noRemotesFound=2
error_notInABranch=3
error_noTrackingBranch=4


if [[ $# = 0 || $1 = 'help' || $1 = 'h' || $1 = '-h' ]]; then
	echo "$helpDoc" | less
	exit 0
fi

# TODO setup some structure to define what subcommands can accept more arguments
regex='^(url|urls)$'
if [[ ! ( $1 =~ $regex ) && $# -gt 1 ]]; then
	echo 'Invalid arguments: `ginfo <subcommand>` does not accept any more arguments' >&2
	exit $error_invalidArguments
fi

case $1 in
	'branch')
		branchRef=$(git symbolic-ref HEAD 2>/dev/null)
		if [[ $? != 0 ]]; then
			echo 'Not in a branch' >&2
			exit $error_notInABranch
		fi
		# Removing the initial "refs/heads/"
		echo ${branchRef#refs/heads/}
		;;

	'size')
		git count-objects --human-readable
		;;

	'tracking'|'upstream')
		upstream=$(git rev-parse --symbolic-full-name @{upstream} 2>/dev/null)
		if [[ $? != 0 ]]; then
			echo 'No tracking branch' >&2
			exit $error_noTrackingBranch
		fi

		# Removing the initial "refs/remotes/""
		echo ${upstream#refs/remotes/}
		;;

	'url'|'urls')
		shift

		if [[ $# -gt 0 ]]; then
			remotes=$(gickr $@ 2> /dev/null)
		else
			remotes=$(gickr -a . 2> /dev/null)
		fi

		if [[ $? != 0 ]]; then
			echo 'No remotes found' >&2
			exit $error_noRemotesFound
		fi

		IFS=$'\n'
		for currentRemote in $remotes; do
			git remote show -n "$currentRemote" \
			| grep --regexp "^*" --regexp "^\s*Fetch" --regexp "^\s*Push"
		done
		unset IFS

		exit 0
		;;

	'user')
		echo $(git config user.name) $(git config user.email)
		;;

	*)
		echo 'Unknown ginfo subcommand' >&2
		echo 'Use `ginfo help` for a list of available subcommands' >&2
		exit $error_invalidArguments
		;;
esac

