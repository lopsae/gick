#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    ginfo - print information about the git repository

SYNOPSIS
    ginfo [help]
    ginfo url|user|branch|upstream

DESCRIPTION
    ginfo [help]
        Prints this help output and quits the program.

    ginfo url
        Prints the push and fetch urls of each remote.

    ginfo user
        Prints the repository user and email.

    ginfo branch
        Prints the current branch checked out.

    ginfo upstream|tracking
        Prints the current upstream branch.

    ginfo size
        Prints a human readable output of the repository object count and
        size.
helpDoc


# Error codes
error_invalidArguments=1
error_noRemoteFound=2
error_notInABranch=3
error_noTrackingBranch=4


if [[ $# = 0 || $1 = 'help' || $1 = 'h' ]]; then
	echo "$helpDoc" | less
	exit 0
fi

if [[ $# -gt 1 ]]; then
	echo 'Invalid arguments: `ginfo <subcommand>` does not accept any more arguments' >&2
	exit $error_invalidArguments
fi

case $1 in
	'url'|'urls')
		shift

		remotes=$(gickr $@ 2> /dev/null)
		if [[ $? != 0 ]]; then
			echo 'No remote found' >&2
			exit $error_noRemoteFound
		fi

		git remote show -n $remotes \
		| grep --regexp "^*" --regexp "^\s*Fetch" --regexp "^\s*Push"
		exit 0
		;;

	'user')
		echo $(git config user.name) $(git config user.email)
		;;

	'branch')
		branchRef=$(git symbolic-ref HEAD 2>/dev/null)
		if [[ $? != 0 ]]; then
			echo 'Not in a branch' >&2
			exit $error_notInABranch
		fi
		# Removing the initial "refs/heads/"
		echo ${branchRef#refs/heads/}
		;;

	'tracking'|'upstream')
		upstream=$(git rev-parse --symbolic-full-name @{upstream} 2>/dev/null)
		if [[ $? != 0 ]]; then
			echo 'No tracking branch' >&2
			exit $error_noTrackingBranch
		fi

		# Removing the initial "refs/remotes/""
		echo ${upstream#refs/remotes/}
		;;

	'size')
		git count-objects --human-readable
		;;

	*)
		echo 'Unknown ginfo subcommand' >&2
		echo 'Use `ginfo help` for a list of available subcommands' >&2
		exit $error_invalidArguments
		;;
esac

