#!/bin/bash

# Gush performs various push operations.

# If the current branch is already tracking a remote branch and gush
# is used without parameters it will just push the pending changes into
# the remote branch.
# If parameters are given these will be used to pick a single remote
# from the available ones and gush will attempt to push into a branch
# of the same name. In this cases the tracking information of the branch
# remains unchanged.

# If the current branch is not tracking any remote branch gush will
# attempt to push the branch into a remote branch of the same name.
# If there is a single remote it will be picked without using
# parameters, otherwise the parameters will be used to pick a single
# remote from the available ones. The branch created in the remote will
# be saved as the current tracking branch.

# If the -d option is used the command will execute in dry run mode and
# no git push command will happen. Whatever would be run will be
# printed instead.


# Error codes
error_invalidOptions=1
error_notInBranch=2
error_noSingleRemote=3
error_noRemoteMatch=4
error_remoteBranchExists=5

# Options parsing
params=$(getopt d $*)
getoptStatus=$?
set -- $params

if [[ $getoptStatus != 0 ]]; then
	echo 'Invalid options' >&2
	exit $error_invalidOptions
fi

dryrun=false

for param; do
	case "$param" in
		-d)
			dryrun=true
			shift
			;;
		--)
			shift
			break
			;;
	esac
done

# If headless nothing to do here
branchName=$(ginfo branch 2>/dev/null)
if [[ $? != 0 ]]; then
	echo 'Not in a branch' >&2
	exit $error_notInBranch
fi

# First check for the tracking branch
setUpstream=''
trackingBranch=$(ginfo tracking 2>/dev/null)
if [[ $? = 0 ]]; then
	# Tracking and no parameters, simply push
	if [[ $# = 0 ]]; then
		if [[ $dryrun = true ]]; then
			echo git push
		else
			git push
		fi
		exit
	fi
else
	# Having no tracking means we will set it
	setUpstream='--set-upstream'
fi

# Get what remote will be used
if [[ $# = 0 ]]; then
	remote=$(gremote 2>/dev/null)
	if [[ $? != 0 ]]; then
		echo 'No single remote found' >&2
		exit $error_noSingleRemote
	fi
else
	remote=$(gremote $@ 2>/dev/null)
	if [[ $? != 0 ]]; then
		echo 'No remote match found' >&2
		exit $error_noRemoteMatch
	fi
fi

# If the upstream will be set,
# check the branch does not exist remotely
if [[ $setUpstream != '' ]]; then
	remoteBranchName="$remote/$branchName"
	git branch -r | tr -d [:blank:] | grep "^$remoteBranchName$" >/dev/null
	if [[ $? = 0 ]]; then
		echo "Remote branch already exists '$remoteBranchName'" >&2
		exit $error_remoteBranchExists
	fi
fi

# All good so beam it up
if [[ $dryrun = true ]]; then
	echo git push $setUpstream $remote $branchName
else
	git push $setUpstream $remote $branchName
fi

