#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    gush -- perform `git push` operations

SYNOPSIS
    gush [-hD] [--] [<substrings>...]

DESCRIPTION
    Performs automatically various common `git push` operations.

    When the current branch has a remote branch as upstream:
      - Without any arguments the program will push into the upstream
        branch.
      - Otherwise a remote is selected with `gickr` and the given
        `<substrings>` and the program will push to a remote branch of the
        same name as the current.
      - The upstream information of the current branch is not changed.

    When the current branch does not have a remote branch as upstream:
      - Without any arguments the program will push into a remote branch of
        the same name if the repository has a single remote. If the
        repository has more than one remote then the `<substrings>`
        argument is mandatory to select a remote with `gickr` and the given
        `<substrings>`.
      - With arguments a remote is selected with `gickr` and the given
        <substrings>` and the program will push to a remote branch of the
        same name as the current.
      - The current branch upstream will be set the remote brach that was
        pushed.

OPTIONS
    -h  Prints this help output and quits the program.

    -D  Enables dry run mode and performs no changes nor pushes. The
        `git push` command that would be run is printed instead along with
        additional information.
helpDoc


# Error codes
error_invalidOptions=1
error_notInBranch=2
error_noSingleRemote=3
error_noRemoteMatch=4
error_remoteBranchExists=5


# Options defaults
debug='false'


# Options parsing
while getopts :hD option; do
	case $option in
 		h)
			# Print help
			if [[ -t 0 ]]; then
				echo "$helpDoc" | less
			else
				echo "$helpDoc"
			fi
			exit 0
			;;
		D)
			# Debug / Dry run mode
			debug='true'
			;;
		?)
			[[ -t 1 ]] && echo "Invalid option: -$OPTARG" >&2
			exit $error_invalidOptions
			;;
	esac
done
shift $(( OPTIND - 1 ));


# If headless nothing to do here
branchName=$(ginfo branch 2>/dev/null)
if [[ $? != 0 ]]; then
	echo 'Not in a branch' >&2
	exit $error_notInBranch
fi

[[ $debug = 'true' ]] && echo "# Branch name: $branchName"


# Check for the upstream branch
setUpstream=''
upstreamInfo=$(ginfo upstream 2>/dev/null)
if [[ $? = 0 ]]; then
	# Branch has upstream
	[[ $debug = 'true' ]] && echo "# Upstream info: $upstreamInfo"

	# Check if we need to do picking
	if [[ $# -gt 0 ]]; then
		pickedRemote=$(gickr "$@" 2>/dev/null)
		if [[ $? != 0 ]]; then
			echo 'No remote match found' >&2
			exit $error_noRemoteMatch
		fi

		[[ $debug = 'true' ]] && echo "# Picked remote: $pickedRemote"

		# In the case of arguments and an existing upstream
		# Push into the picked remote with the current branch name
		if [[ $debug = 'true' ]]; then
			echo git push "$pickedRemote" "$branchName"
		else
			git push "$pickedRemote" "$branchName"
		fi
	else
		upstreamRemote=${upstreamInfo%/*}
		upstreamBranch=${upstreamInfo#*/}

		[[ $debug = 'true' ]] && echo "# Upstream remote: $upstreamRemote"
		[[ $debug = 'true' ]] && echo "# Upstream branch: $upstreamBranch"

		# In the case of NO arguments and an existing upstream
		# Push into the existing upstream
		if [[ $debug = 'true' ]]; then
			echo git push "$upstreamRemote" "$upstreamBranch"
		else
			git push "$upstreamRemote" "$upstreamBranch"
		fi
	fi
else
	# Having no upstream means we will set it

	# Check if we need to do picking
	if [[ $# -gt 0 ]]; then
		pickedRemote=$(gickr "$@" 2>/dev/null)
		if [[ $? != 0 ]]; then
			echo 'No remote match found' >&2
			exit $error_noRemoteMatch
		fi

		[[ $debug = 'true' ]] && echo "# Picked remote: $pickedRemote"

		# In the case of arguments and an NO upstream
		# Push into the picked remote with the current branch name
		if [[ $debug = 'true' ]]; then
			echo git push --set-upstream "$pickedRemote" "$branchName"
		else
			git push --set-upstream "$pickedRemote" "$branchName"
		fi
	else
		# In the case of NO arguments and an NO upstream
		# Check if there is a single remote and push with current branch name
		singleRemote=$(gickr 2>/dev/null)
		if [[ $? != 0 ]]; then
			echo 'No single remote found' >&2
			exit $error_noSingleRemote
		fi

		[[ $debug = 'true' ]] && echo "# Single remote: $singleRemote"

		if [[ $debug = 'true' ]]; then
			echo git push --set-upstream "$singleRemote" "$branchName"
		else
			git push --set-upstream "$singleRemote" "$branchName"
		fi
	fi
fi


# TODO do we want to still check if the remote branch exists?
# If the upstream will be set,
# check the branch does not exist remotely
# if [[ $setUpstream != '' ]]; then
# 	remoteBranchName="$remote/$branchName"
# 	git branch -r | tr -d [:blank:] | grep "^$remoteBranchName$" >/dev/null
# 	if [[ $? = 0 ]]; then
# 		echo "Remote branch already exists '$remoteBranchName'" >&2
# 		exit $error_remoteBranchExists
# 	fi
# fi

