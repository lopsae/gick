#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    glist -- git status for script consumption

SYNOPSIS
    glist [-hcsw] [--] [<filepaths>...]

DESCRIPTION
    Prints a sensible git status that can be consumed easily by other
    programs.

    The status printed is based in the output of `git status --porcelain`
    and will comply with the following:
      - One file status per line, with the following format:
          - one leter for stage status
          - one leter for workspace status
          - one space
          - and the filepath
      - Filepaths are not quoted regardless of the presence of spaces
        within and no special characters are escaped.
      - No R status is ever printed, instead the status of both related
        files are printed each on its own line following the normal format.
      - When run from a subdirectory the filepaths are relative to it.

    If `<filepaths>` are provided only the status of those given files are
    printed.

    The program can also receive through standard input a list of files to
    print, one filepath per line. When using standard input the given list
    of filepaths is merged with any `<filepaths>` provided as arguments.

OPTIONS
    -h  Prints this help output and quits the program.

    -c  Prints only filepaths, status are ommited.

    -s  Prints only files with any status in stage.

    -w  Prints only files with any status in the workspace.

EXIT STATUS
    0   When run without options nor arguments; if any file in the
        repository has a git status.

        When run with `-s` or `-w` options, or both; if any file in the
        repository has an appropiate git status.

        When filepaths are provided through arguments or standart input, or
        both; if and only if all the given filepaths have an appropiate git
        status.

    >0  If no files match the specified git status.
helpDoc


# TODO -cx options must change to -kl
# TODO -c becomes passthrough for pick


# Error codes
error_invalidOptions=1
error_noMatch=2


# Options defaults
printStatus='true'
printOnlyStage='false'
printOnlyWorkspace='false'


# Options parsing
while getopts :hcws option; do
	case $option in
 		h)
			# Print help
			if [[ -t 0 ]]; then
				echo "$helpDoc" | less
			else
				echo "$helpDoc"
			fi
			exit 0
			;;
		c)
			# Cut status from output
			printStatus='false'
			;;
		s)
			# Only files with stage status
			printOnlyStage='true'
			;;
		w)
			# Only files with workspace status
			printOnlyWorkspace='true'
			;;
		?)
			[[ -t 1 ]] && echo "Invalid option: -$OPTARG" >&2
			exit $error_invalidOptions
			;;
	esac
done
shift $(( OPTIND - 1 ));


# Piped content uses exit status
usePiped='false'
if [[ ! -t 0 ]]; then
	usePiped='true'
	piped=$(cat)
fi

# If -s and -w are used, all status is printed
if [[ $printOnlyStage == 'true' && $printOnlyWorkspace == 'true' ]]; then
	printOnlyStage='false'
	printOnlyWorkspace='false'
fi


# Defining the list of files to use
filePaths=()
if [[ $# -gt 0 ]]; then
	usingSpecificFiles='true'
	filePaths=("$@")
fi

if [[ $usePiped == 'true' ]]; then
	usingSpecificFiles='true'
	IFS=$'\n'
	for item in $piped; do
		filePaths+=("$item")
	done
	unset IFS
fi

# Getting a clean status, separated by new lines
rawStatus=$(git status -z --untracked-files -- "${filePaths[@]}" | tr '\0' '\n')

relativePath=$(git rev-parse --show-cdup)


# TODO have a first loop that cleans the ouput from R status, and marks those
# lines for requery
# that way the second loop is cleaner by not having to handle that special case


nextIsRenamedFile='false'
filesPrinted=0
IFS=$'\n'
for statusLine in $rawStatus; do
	# For renamed files, the current line is only the filename
	# Status is requested again to have the correct status of that file
	if [[ $nextIsRenamedFile == 'true' ]]; then
		# On very odd cases, a renamed file which was re-added, the status
		# of a specific file can actualy return two lines, for this case
		# we take just the first line
		fileName="$relativePath$statusLine"
		statusLine=$(git status -z -- "$fileName" | xargs -0 -n1 | head -n 1)
		nextIsRenamedFile='false'
	fi

	# Retrieve both status of the file
	stageStatus=${statusLine:0:1}
	workspaceStatus=${statusLine:1:1}
	fileName=${statusLine:3}

	# Handing special R status
	if [[ $stageStatus == 'R' ]]; then
		# R status is for renamed files, its a mess, and it means the next
		# line will contain ONLY the name of the file that was removed
		nextIsRenamedFile='true'

		# Current file needs to be requested again to get its correct status
		statusLine=$(git status -z -- "$relativePath$fileName")
		stageStatus=${statusLine:0:1}
		workspaceStatus=${statusLine:1:1}
		fileName=${statusLine:3}
	fi

	if [[ $printOnlyStage == 'true' && $stageStatus == ' ' ]]; then
		continue
	fi

	if [[ $printOnlyStage == 'true' && $stageStatus == '?' ]]; then
		continue
	fi

	if [[ $printOnlyWorkspace == 'true' && $workspaceStatus == ' ' ]]; then
		continue
	fi

	filesPrinted=$(( $filesPrinted + 1 ))
	if [[ $printStatus == 'true' ]]; then
		echo "$stageStatus$workspaceStatus $relativePath$fileName"
	else
		echo "$relativePath$fileName"
	fi
done
unset IFS

# Check if the files printed are at least as many as the specific files given
# TODO this might fail if repeated files are provided through stdin or arguments
# or on very od cases or renamed-readed files, which may have to be solved
# on the reimplementation
if [[ ${#filePaths[@]} -gt 0 && $filesPrinted -lt ${#filePaths[@]} ]]; then

	[[ -t 1 ]] && echo "Some files were not found" >&2
	exit $error_noMatch
fi

if [[ $filesPrinted -eq 0 ]]; then
	[[ -t 1 ]] && echo "No files with status" >&2
	exit $error_noMatch
fi

