#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    giff -- runs `git difftool` with a file selected with `gick`

SYNOPSIS
    giff [-hiup] <substrings>...

DESCRIPTION
    Runs `git difftool`, opening whichever tool is configured by the git
    configuration. The file to open is selected with `gick` and the given
    <substrings>.

    By default the script compares between HEAD and the workspace. This
    behavior can be modified with the `-i` or `-u` options.

OPTIONS
    -h  Prints this help output.

    -i  Compare files between stage and the workspace. Using this option
        takes precedence over `-u`.

    -u  Compare files between HEAD and stage.

    -p  Prints only the filenames, status are ommited.
helpDoc


# Error codes
error_invalidOptions=1
error_noParams=2
error_noMatch=3
error_noChanges=4


# Options values
usePlainPath='false'
compareStageAndWorkspace='false'
compareHeadAndStage='false'


# Options parsing
while getopts :hiup option; do
	case $option in
 		h)
			# Print help
			if [[ -t 0 ]]; then
				echo "$helpDoc" | less
			else
				echo "$helpDoc"
			fi
			exit
			;;
		i)
			# Compare between stage and workspace
			compareStageAndWorkspace='true'
			;;
		u)
			# Compare between head and stage
			compareHeadAndStage='true'
			;;
		p)
			# Use plain, do not pick
			usePlainPath='true'
			;;
		?)
			echo "Invalid option: -$OPTARG" >&2
			exit $error_invalidOptions
			;;
	esac
done

shift $(( OPTIND - 1 ));


# Options validation
if [[ $# = 0 ]]; then
	echo 'No parameters given' >&2
	exit $error_noParams
fi


if [[ $usePlainPath = 'true' ]]; then
	fileName="$1"
else
	fileName=$(gick "$@" 2> /dev/null | head -n 1)

	if [[ $fileName = '' ]]; then
		echo 'No file found' >&2
		exit $error_noMatch
	fi
fi


difftoolOptions='--no-prompt --minimal --exit-code'
if [[ $compareStageAndWorkspace = 'true' ]]; then
	echo "diff stage-workspace '$fileName'"
	git difftool $difftoolOptions -- "$fileName"
	diffToolExit=$?
elif [[ $compareHeadAndStage = 'true' ]]; then
	echo "diff head-stage '$fileName'"
	git difftool $difftoolOptions --staged HEAD -- "$fileName"
	diffToolExit=$?
else
	echo "diff head-workspace '$fileName'"
	git difftool $difftoolOptions HEAD -- "$fileName"
	diffToolExit=$?
fi

if [[ $diffToolExit = 0 ]]; then
	# TODO if a not existing file is provided with -p, 'no changes' is printed
	# need to check if a file exists and has status, maybe glist can do that
	echo 'No changes' >&2
	exit $error_noChanges
fi

