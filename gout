#!/bin/bash

read -d '' helpDoc <<"helpDoc"
Checkout a branch found through gickb.
helpDoc


# gout cosa
# normal checkout
# if ambiguou print

# gout -r cosa
# checkout remote branch
# if ambiguous print

# gout -n 2 cosa
# checkout the given specific match, usefull when there is more that one
# match

# Error codes
error_helpDoc=1
error_invalidOptions=2
error_invalidForceIndex=3
error_noMatches=4
error_ambiguousMatch=5
error_forceIndexOverBound=6


# Print help
if [[ $# = 0 || $1 = '-h' || $1 = '--help' ]]; then
	echo "$helpDoc" >&2
	exit $error_helpDoc
fi

# Options values
useRemote=''
forceIndex=0

# Options parsing
params=$(getopt rn: $*)
getoptStatus=$?
set -- $params

if [[ $getoptStatus != 0 ]]; then
	echo 'Invalid options' >&2
	exit $error_invalidOptions
fi

for param; do
	case "$param" in
		-r)
			# Check remote branches
			useRemote='-r'
			shift
			;;
		-n)
			# Use an specific match
			shift
			forceIndex=$1
			shift
			# For some reason \d does not work inside with [[ =~ ]]
			if [[ ! $forceIndex =~ ^[0-9]+$ || $forceIndex < 1 ]]; then
				# forceIndex is not a number or lower that zero
				echo "Invalid argument with flag '-n': should be an integer greater that 0" >&2
				exit $error_invalidForceIndex
			fi
			;;
		--)
			shift
			break
			;;
	esac
done

# Always get all matching branches with -a
branches=$(gickb $useRemote -- -a $@ 2>/dev/null)

if [[ $? != 0 ]]; then
	echo 'No branch found' >&2
	exit $error_noMatches
fi

matchesCount=$(echo "$branches" | wc -l | tr -d [:blank:])

if [[ $forceIndex = 0 ]]; then
	# No option -n, there mist be a single match
	if [[ $matchesCount > 1 ]]; then
		echo 'More that one matching branch found' >&2
		echo 'Use "-n #" to use an specific match' >&2

		# Print all the matches numbered by line
		echo "$branches" | awk '{printf "%d: %s\n", NR, $0}' >&2
		exit $error_ambiguousMatch
	fi
	
	# If there is a single match we are cool
	branchName=$branches
else
	# There is a forced index, grab that specific one
	if [[ $forceIndex -gt $matchesCount ]]; then
		echo "Invalid argument with flag '-n': out of bounds" >&2
		# Print all the matches numbered by line
		echo "$branches" | awk '{printf "%d: %s\n", NR, $0}' >&2
		exit $error_forceIndexOverBound
	fi
	
	# Get the specific line
	branchName=$(echo "$branches" | sed -n "${forceIndex}{p;q;}")
fi

# Clean up remote
if [[ $useRemote != '' ]]; then
	branchName=${branchName#*/}
fi

git checkout $branchName

