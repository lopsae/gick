Language Reminder
=================

Git status for each file
------------------------
in stage
in the workspace


Command line parts in helpdocs
------------------------------
commands or options like `-s` or `git status` are quoted like so
also other options like `<substrings>`


stdin/stdot
-----------
stdin is standard input
stder is standard error


filename/filepath/path
----------------------
In helpdocs use each for the following
	filename: synonim for basename, only the final part of the whole path+name for a file.
	filepath: path+name for a file.
	path: only the path made by folders, not ending on a filename.
In code always use "fileName". This way it is more in line with other common names like "fileData", "fileContents", "fileStatus", etc.


The program
-----------
in helpdocs, the "script" is always refered as "the program"
E.g, "The program will exit with zero."


When accepting standart input
-----------------------------
E.g,
The program can also receive through standard input a list of files [to stage], one path per line.


Examples
--------
Start with "E.g," and example is indented one more level.


NAME sentence
-------------
Should read as an imperative to the program, starts with lowercase
* ls - list directory contents
* git-status - Show the working tree status
TODO this needs updating in all the scripts


DESCRIPTION sentence
--------------------
Should read with an implicit [the program], and start with uppercase
* [the program] Selects a file for staging...


Canditates:
* selects a file with gick to stage
* runs git difftool using pick to select the file

* selects a file with gick to ...?
* runs ... using gick to select the file?

* selects a file using `gick` and stages it
* selects a file using `gick` and opens the diff tool to compare it

current favorites:
* stages a file selected with `gick`
* runs `git difftool` with a file selected with `gick`


EXIT STATUS sentences
---------------------
TODO new format like the one in pick


Section sequence in helpdocs
----------------------------
* NAME
* SYNOPSIS
* DESCRIPTION
* OPTIONS
* EXIT STATUS (optional)
* EXAMPLES (optional)


Options order in SYNOPTSIS and OPTIONS
-------------
-h <- always the first
-specific <- command specific options
-cx <- cut-status/print-status group
-swa <- stage/worspace/all group

-D <- debug/dev/dryrun, always the last


Options descriptions
--------------------

-h Prints this help output and quits the program.
TODO pending change, previous was "Prints this help output"

-p plain path, instead of searching with pick/gick
	original from gadd - Uses the parameters given as paths, instead of performing a search with `gick`.
	from giff - Prints only the filenames, status are ommited.


-s consider only stage files
	original from glist - Prints only files with any status in stage.
-w consider only workspace files
	original from glist - Prints only files with any status in the workspace.

-c cut off status
	original from glist - Prints only filenames, status are ommited.
-x show status
	original from gick - Prints the status of the file along the filename. The format remains the same used by `git status`.

-a work with all matches, instead of just the first
	original from pick - Displays all lines that match the search.
	from gadd - Stages all files that match the search, instead of only the first one.


-D dryrun/debug
	original from pick - Prints to standard error the regular expression used to search for matches.


Error outputs
-------------

Invalid options
echo "Invalid option: -$OPTARG" >&2

No parameters
echo 'No parameters given' >&2

No files found
echo 'No files found' >&2

No op
echo 'No operation done' >&2


Current progress
----------------

pick
- checked for "program"
- checked for ``
- new EXIT STATUS

glist
- checked for "program"
- checked for ``

gick
- checked for "program"
- checked for ``
