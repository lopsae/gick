Language Reminder
=================

Git status for each file
------------------------
in stage
in the workspace


Command line parts in helpdocs
------------------------------
commands or options like `-s` or `git status` are quoted like so also other options like `<substrings>`. Pretty much everything that could go in the command line should use quotes.


Parts of command lines
----------------------
- Command or program: the name of the command itself, like `git` or `gick`.
- Options: specific switches for commands, the ones that start with dashes, like `-p` or `--help`
- Arguments: additional information provided to the program or options, surrounder by angle brackets like `<substrings>`. When refering to them on any part of the helpdocs they should keep the brackets.
- Parameters: use instead arguments


stdin/stdot
-----------
stdin is standard input
stder is standard error


filename, filepath, path
------------------------
In helpdocs use each for the following
	filename: synonim for basename, only the final part of the whole path+name for a file.
	filepath: path+name for a file.
	path: only the path made by folders, not ending on a filename.
In code always use "fileName". This way it is more in line with other common names like "fileData", "fileContents", "fileStatus", etc.


The program
-----------
in helpdocs, the "script" is always refered as "the program"
E.g, "The program will exit with zero."


When accepting standart input
-----------------------------
Use this general sentence. Original in gadd
E.g,
	The program can also receive through standard input a list of files to stage, one filepath per line.


Print vs display
----------------
Use 'print'


Argument vs parameter
---------------------
Use 'argument'


Examples
--------
Start with "E.g," and example is indented one more level.


Descriptions that relly heavily in gick
---------------------------------------
Describes the action of its defaults, that is, that the program works over one file. From gadd:
	Stages a file selected with `gick` and the given `<substrings>`.
If there is a dot case:
TODO remove this case from GADD and GESET, it is to be replaced with `-a .`
	If `<substrings>` is comprised of a single dot `.` the program will try to ... all ... files with a ... status.
If scope of the command is limited to a certain status
	Only files with a ... status are considered for selection.



Checkout as a verb
------------------
When using checkout as a verb in description, separate if there is need for conjugation
	Checks out the HEAD version of a file selected....


NAME sentence
-------------
Should read as an imperative to the program, starts with lowercase
- ls - list directory contents
- git-status - Show the working tree status

For programs that search and perform an action:
- original from gadd: stage a file selected with `gick`
- [action] a [object] selected with `[program]`


DESCRIPTION sentence
--------------------
Should read with an implicit [the program], and start with uppercase
- [the program] Selects a file for staging...

For programs that search and perform an action:
- original from gadd: Stages a file selected with `gick` and the given `<substrings>`.
- [Action] a [object] selected with `[program]` and the given `<substrings>`.


EXIT STATUS sentences
---------------------
TODO new format like the one in pick


Section sequence in helpdocs
----------------------------
- NAME
- SYNOPSIS
- DESCRIPTION
- OPTIONS
- EXIT STATUS (optional)
- EXAMPLES (optional)


Options order in SYNOPTSIS and OPTIONS
-------------
-h <- always the first
-specific <- command specific options
-ac <- all-matches/consider-caps pick specific options
-sw <- stage/worspace/all group
-kl <- cut-status/print-status group
	REMINDER: previously was -cx, -c was changed because it was used by pick
	changed to -kl because of 'k' sound closeness to 'c', and because 'l' is next to it and already used for printing longer information
	TODO delete me once this reminder becomes meaningless
-D <- debug/dev/dryrun, always the last


Options descriptions
--------------------

-h Prints this help output and quits the program.

-p plain path, instead of searching with pick/gick
	original from gadd - Uses the arguments given as paths, instead of performing a search with `gick`.
	from giff - Prints only the filenames, status are ommited.


-s consider only stage files
	original from glist - Prints only files with any status in stage.
-w consider only workspace files
	original from glist - Prints only files with any status in the workspace.

-c cut off status
	original from glist - Prints only filenames, status are ommited.
-x show status
	original from gick - Prints the status of the file along the filename. The format remains the same used by `git status`.

-a work with all matches, instead of just the first
	original from pick - Prints all lines that match the search.
	from gadd - Stages all files that match the search, instead of only the first one.


-D dryrun/debug
	original from pick - Prints to standard error the regular expression used to search for matches.
	more common from gadd - Enables dry run mode and performs no changes to stage. Messages about files being staged are still printed.


Error outputs
-------------

Invalid options
echo "Invalid option: -$OPTARG" >&2

No arguments
echo 'No arguments given' >&2

No files found
echo 'No files found' >&2

No op
echo 'No operation done' >&2


Current progress
----------------

Pending to start:
- none

Working on:
- switch from -cx to -kl
- flip options, -sw come before -kl
- -c as standart passthrough

Finish with
- none

pick
- new EXIT STATUS

glist
- new EXIT STATUS

gick

gickb, gickr

gadd, geset, gevert

giff

gout, gerge

gush

ginfo
