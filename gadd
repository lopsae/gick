#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    gadd - add to git stage using gick

SYNOPSIS
    gadd [-h]

DESCRIPTION
Adds and removes files using gick. Any option passed is given directly to the
gick command.

If dot is used as the single option the command acts over all the files
with any workspace status.

If content is given through stdin it is interpreted as a list of files, one on
each line, over which the command will act. In this case any option given to
the command is ignored.

OPTIONS
    -h  Prints this help output.
helpDoc


# Error codes
error_invalidOptions=1
error_noParams=2
error_noMatch=3


# Options values
# none yet

# Options parsing
while getopts h option; do
	case $option in
 		h)
			# Print help
			if [[ -t 0 ]]; then
				echo "$helpDoc" | less
			else
				echo "$helpDoc"
			fi
			exit
			;;
		?)
			exit $error_invalidOptions
			;;
	esac
done

shift $(( OPTIND - 1 ));


# Options validation

usePiped='false'
# If there is piped content any other option are ignored
if [[ ! -t 0 ]]; then
	usePiped='true'
	piped=$(cat)
else
	if [[ $# = 0 ]]; then
		echo 'No parameters given' >&2
		exit $error_noParams
	fi

	# Special dot case
	if [[ $# = 1 && $1 = '.' ]]; then
		gtatus -c | gadd
		exit $?
	fi
fi


# Getting the list of files to use
fileList=''
if [[ $usePiped = 'true' ]]; then
	fileList="$piped"
else
	fileList=$(gick -- "$@" 2>/dev/null)

	if [[ $? != 0 ]]; then
		echo 'No files found' >&2
		exit $error_noMatch
	fi
fi

# Properly staging each file
IFS=$'\n'
for fileName in $fileList; do
	# Retrieve status of the file
	fileStatus=$(gtatus -- "$fileName")
	stageStatus=${fileStatus:0:1}
	workspaceStatus=${fileStatus:1:1}

	case $workspaceStatus in
		' ')
			case $stageStatus in
				# TODO do gtatus returns ever R?
				[MAR])
					echo "Already staged '$fileName'" >&2
					;;
				[D])
					echo "Already removed '$fileName'" >&2
					;;
				esac
			;;
		[MA?])
			git add "$fileName"
			echo "added '$fileName'"
			;;
		[D])
			git rm --quiet "$fileName"
			echo "removed '$fileName'"
			;;
		*)
			echo "Unknown workspace status '$workspaceStatus' for '$fileName'" >&2
			echo 'No operation done' >&2
			;;
	esac
done
unset IFS

