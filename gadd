#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    gadd - add to git stage using gick

SYNOPSIS
    gadd [-hN]

DESCRIPTION
TODO format description

Adds and removes files using gick. Any option passed is given directly to the
gick command.

If dot is used as the single option the command acts over all the files
with any workspace status.

If content is given through stdin it is interpreted as a list of files, one on
each line, over which the command will act. In this case any option given to
the command is ignored.

TODO above is false, -N option is passed through when used with piped
contento so it is not ignored

OPTIONS
    -h  Prints this help output.
    
    -N  Stages untracked files with an intent-to-add state. Processed files
        will be staged with an empty marker so that later can be properly
        added. This state allows other commands, like giff, to properly
        work with these files. When using this option only untracked files
        will be processed.
helpDoc


# Error codes
error_invalidOptions=1
error_noParams=2
error_noMatch=3


# Options values
stageUntracked='false'


# Options parsing
while getopts hN option; do
	case $option in
 		h)
			# Print help
			if [[ -t 0 ]]; then
				echo "$helpDoc" | less
			else
				echo "$helpDoc"
			fi
			exit
			;;
		N)
			# Stage untracked files
			stageUntracked='true'
			;;
		?)
			exit $error_invalidOptions
			;;
	esac
done

shift $(( OPTIND - 1 ));


# Options validation

# Either piped content or parameters are required
usePiped='false'
if [[ ! -t 0 ]]; then
	usePiped='true'
	piped=$(cat)
elif [[ $# = 0 ]]; then
	echo 'No parameters given' >&2
	exit $error_noParams
fi

# Single dot special case
if [[ $# = 1 && $1 = '.' ]]; then
	if [[ $stageUntracked = 'false' ]]; then
		gtatus -c | gadd
		exit $?
	else
		# TODO when gtatus support status selection, replace bellow
		gtatus | grep "^?" | cut -c 4- | gadd -N
		exit $?
	fi
fi


# Getting the list of files to use
fileList=''
if [[ $usePiped = 'true' ]]; then
	fileList="$piped"
else
	fileList=$(gick -- "$@" 2>/dev/null)

	if [[ $? != 0 ]]; then
		echo 'No files found' >&2
		exit $error_noMatch
	fi
fi

# Properly staging each file
IFS=$'\n'
for fileName in $fileList; do
	# Retrieve status of the file
	# TODO status could be provided by single call to gtatus
	
	# TODO what if file does not exists or has no status?
	# files through pipe in could not exist
	
	# TODO some cases of gtatus, deleted file from git but file still exists
	# is considered as D, and with a second line as untracked with ??
	# those files will have two lines of status in a single gtatus call
	# split them in those cases?
	# but seems to be the case only of a deleted file that was readded..
	# which is already odd. In those cases git add -N yields a MM status
	fileStatus=$(gtatus -- "$fileName")
	stageStatus=${fileStatus:0:1}
	workspaceStatus=${fileStatus:1:1}
	
	# Stage untracked will only add unstaged files
	if [[ $stageUntracked = 'true' ]]; then
		if [[ $stageStatus = '?' ]]; then
			git add -N "$fileName"
			echo "marked '$fileName'"
		else
			echo "Invalid stage status '$stageStatus' for '$fileName'" >&2
			echo 'Only untracked are valid for intent-to-add, no operation done' >&2
		fi
		continue
	fi
	
	# Normal files will get added or removed acordingly
	case $workspaceStatus in
		' ')
			case $stageStatus in
				[MA])
					echo "Already staged '$fileName'" >&2
					;;
				[D])
					echo "Already removed '$fileName'" >&2
					;;
				esac
			;;
		[MA?])
			git add "$fileName"
			echo "added '$fileName'"
			;;
		[D])
			git rm --quiet "$fileName"
			echo "removed '$fileName'"
			;;
		*)
			echo "Unknown workspace status '$workspaceStatus' for '$fileName'" >&2
			echo 'No operation done' >&2
			;;
	esac
done
unset IFS

