#!/bin/bash

read -d '' helpDoc <<"helpDoc"
NAME
    gadd - stage a file selected with `gick`

SYNOPSIS
    gadd [-hNpaD] [--] <substrings>...

DESCRIPTION
    Stages a file selected with `gick` and the given `<substrings>`. The
    file will be properly added or removed from stage depending on its
    workspace status.

    Only files with a workspace status are considered for selection.

    If `<substrings>` is comprised of a single dot `.` the program will try
    to stage all modified files present in the workspace.

    The program can also receive through standard input a list of files to
    stage, one filepath per line. When using standard input all given
    `<substrings>` are ignored and no search is performed.

OPTIONS
    -h  Prints this help output and quits the program.

    -N  Stages untracked files with an intent-to-add state. Processed files
        will be staged with an empty marker so that later can be properly
        added. This state allows other scripts, like giff, to properly
        work with these files. When using this option only untracked files
        will be processed, files with any other workspace status are
        ignored.

    -p  Uses the arguments given as filepaths, instead of performing a
        search.

    -a  Stages all files that match the search, instead of only the first
        one. This option is ignored if `-p` is used.

    -D  Enables dry run mode and performs no changes to stage. Messages
        about files being staged are still printed.
helpDoc


# Error codes
error_invalidOptions=1
error_noParams=2
error_noMatch=3


# Options defaults
dotCaseOptions=''
gickOptions=''
stageUntracked='false'
usePlainPaths='false'
run='true'


# Options parsing
while getopts :hNpaD option; do
	case $option in
 		h)
			# Print help
			if [[ -t 0 ]]; then
				echo "$helpDoc" | less
			else
				echo "$helpDoc"
			fi
			exit 0
			;;
		N)
			# Stage untracked files
			stageUntracked='true'
			dotCaseOptions+=" -$option"
			;;
		p)
			# Using plain paths
			usePlainPaths='true'
			;;
		[a])
			# Pass through to gick
			# all matches
			gickOptions+=" -$option"
			;;
		D)
			# Dry run mode
			run='false'
			dotCaseOptions+=" -$option"
			;;
		?)
			echo "Invalid option: -$OPTARG" >&2
			exit $error_invalidOptions
			;;
	esac
done
shift $(( OPTIND - 1 ));


# Either piped content or arguments are required
usePiped='false'
if [[ ! -t 0 ]]; then
	usePiped='true'
	piped=$(cat)
elif [[ $# = 0 ]]; then
	echo 'No arguments given' >&2
	exit $error_noParams
fi

# Single dot special case
if [[ $# = 1 && $1 = '.' ]]; then
	if [[ $stageUntracked = 'false' ]]; then
		fileList=$(glist -cw)
	else
		# TODO when glist support status selection, replace bellow
		fileList=$(glist -w | grep "^.?" | cut -c 4-)
	fi

	echo "$fileList" | gadd $dotCaseOptions
	exit $?
fi


# Getting the list of files to use
if [[ $usePiped = 'true' ]]; then
	fileList="$piped"
else
	if [[ $usePlainPaths = 'true' ]]; then
		# Moving params to filelist, separated by newlines
		fileList=$1
		shift
		for item in "$@"; do
			fileList+=$'\n'$item
		done
	else
		fileList=$(gick -w $gickOptions -- "$@" 2>/dev/null)

		if [[ $? != 0 ]]; then
			echo 'No files found' >&2
			exit $error_noMatch
		fi
	fi
fi

# Properly staging each file
IFS=$'\n'
for fileName in $fileList; do
	# Retrieve status of the file
	# TODO status could be provided by single call to glist

	# TODO what if file does not exists or has no status?
	# files through pipe in could not exist

	# TODO some cases of glist, deleted file from git but file still exists
	# is considered as D, and with a second line as untracked with ??
	# those files will have two lines of status in a single glist call
	# split them in those cases?
	# but seems to be the case only of a deleted file that was readded..
	# which is already odd. In those cases git add -N yields a MM status
	fileStatus=$(glist -- "$fileName")
	stageStatus=${fileStatus:0:1}
	workspaceStatus=${fileStatus:1:1}

	# Stage untracked will only add unstaged files
	if [[ $stageUntracked = 'true' ]]; then
		if [[ $workspaceStatus = '?' ]]; then
			git add -N "$fileName"
			echo "marked '$fileName'"
		else
			echo "Invalid stage status '$workspaceStatus' for '$fileName'" >&2
		fi
		continue
	fi

	# Normal files are added or removed acordingly
	case $workspaceStatus in
		' ')
			# TODO since gadd can only accept now files with worspace
			# status these messages might be unnecesary
			# geset shows a `cannot reset 'file'`
			case $stageStatus in
				[MA])
					echo "Already staged '$fileName'" >&2
					;;
				[D])
					echo "Already removed '$fileName'" >&2
					;;
				*)
					echo "Already staged with status '$stageStatus'" >&2
					;;
			esac
			;;
		[MA?])
			[[ $run = 'true' ]] && git add -A -- "$fileName"
			echo "added '$fileName'"
			;;
		[D])
			[[ $run = 'true' ]] && git add -A -- "$fileName"
			echo "removed '$fileName'"
			;;
		*)
			# TODO fails to here when the given file does not exists, fix
			# when glist can return that the file does exist
			echo "Unknown workspace status '$workspaceStatus' for '$fileName'" >&2
			;;
	esac
done
unset IFS

